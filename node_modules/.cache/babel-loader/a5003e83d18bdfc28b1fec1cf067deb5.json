{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTitle, useInput } from 'ra-core';\nimport defaultSanitizeRestProps from './sanitizeRestProps';\nimport CheckboxGroupInputItem from './CheckboxGroupInputItem';\nimport InputHelperText from './InputHelperText';\n\nvar sanitizeRestProps = function (_a) {\n  var setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      rest = __rest(_a, [\"setFilter\", \"setPagination\", \"setSort\"]);\n\n  return defaultSanitizeRestProps(rest);\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {},\n    label: {\n      transform: 'translate(0, 8px) scale(0.75)',\n      transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right')\n    }\n  };\n}, {\n  name: 'RaCheckboxGroupInput'\n});\n/**\n * An Input component for a checkbox group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\n * the 'optionValue' of 'choices' attribute objects.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *     { id: 12, name: 'Ray Hakt' },\n *     { id: 31, name: 'Ann Gullar' },\n *     { id: 42, name: 'Sean Phonee' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi' },\n *    { _id: 456, full_name: 'Jane Austen' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.category.programming' },\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\n *    { id: 'photography', name: 'myroot.category.photography' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <CheckboxGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Checkbox> components\n */\n\nvar CheckboxGroupInput = function (_a) {\n  var _b = _a.choices,\n      choices = _b === void 0 ? [] : _b,\n      format = _a.format,\n      helperText = _a.helperText,\n      label = _a.label,\n      _c = _a.margin,\n      margin = _c === void 0 ? 'dense' : _c,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      onFocus = _a.onFocus,\n      optionText = _a.optionText,\n      optionValue = _a.optionValue,\n      options = _a.options,\n      parse = _a.parse,\n      resource = _a.resource,\n      row = _a.row,\n      source = _a.source,\n      translate = _a.translate,\n      translateChoice = _a.translateChoice,\n      validate = _a.validate,\n      rest = __rest(_a, [\"choices\", \"format\", \"helperText\", \"label\", \"margin\", \"onBlur\", \"onChange\", \"onFocus\", \"optionText\", \"optionValue\", \"options\", \"parse\", \"resource\", \"row\", \"source\", \"translate\", \"translateChoice\", \"validate\"]);\n\n  var classes = useStyles({});\n\n  var _d = useInput(__assign({\n    format: format,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    parse: parse,\n    resource: resource,\n    source: source,\n    validate: validate\n  }, rest)),\n      id = _d.id,\n      _e = _d.input,\n      finalFormOnChange = _e.onChange,\n      finalFormOnBlur = _e.onBlur,\n      value = _e.value,\n      isRequired = _d.isRequired,\n      _f = _d.meta,\n      error = _f.error,\n      touched = _f.touched;\n\n  var handleCheck = useCallback(function (event, isChecked) {\n    var newValue;\n\n    try {\n      // try to convert string value to number, e.g. '123'\n      newValue = JSON.parse(event.target.value);\n    } catch (e) {\n      // impossible to convert value, e.g. 'abc'\n      newValue = event.target.value;\n    }\n\n    if (isChecked) {\n      finalFormOnChange((value || []).concat([newValue]));\n    } else {\n      finalFormOnChange(value.filter(function (v) {\n        return v != newValue;\n      })); // eslint-disable-line eqeqeq\n    }\n\n    finalFormOnBlur(); // HACK: See https://github.com/final-form/react-final-form/issues/365#issuecomment-515045503\n  }, [finalFormOnChange, finalFormOnBlur, value]);\n  return React.createElement(FormControl, __assign({\n    component: \"fieldset\",\n    margin: margin,\n    error: touched && !!error\n  }, sanitizeRestProps(rest)), React.createElement(FormLabel, {\n    component: \"legend\",\n    className: classes.label\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(FormGroup, {\n    row: row\n  }, choices.map(function (choice) {\n    return React.createElement(CheckboxGroupInputItem, {\n      key: get(choice, optionValue),\n      choice: choice,\n      id: id,\n      onChange: handleCheck,\n      options: options,\n      optionText: optionText,\n      optionValue: optionValue,\n      translateChoice: translateChoice,\n      value: value\n    });\n  })), touched && error || helperText ? React.createElement(FormHelperText, null, React.createElement(InputHelperText, {\n    touched: touched,\n    error: error,\n    helperText: helperText\n  })) : null);\n};\n\nCheckboxGroupInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n  className: PropTypes.string,\n  label: PropTypes.string,\n  source: PropTypes.string,\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  row: PropTypes.bool,\n  resource: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nCheckboxGroupInput.defaultProps = {\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true,\n  fullWidth: true,\n  row: true\n};\nexport default CheckboxGroupInput;","map":{"version":3,"sources":["/Users/luciano/Desktop/Projetos/PlayerStars/admin/node_modules/ra-ui-materialui/esm/input/CheckboxGroupInput.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","useCallback","PropTypes","get","FormLabel","FormControl","FormGroup","FormHelperText","makeStyles","FieldTitle","useInput","defaultSanitizeRestProps","CheckboxGroupInputItem","InputHelperText","sanitizeRestProps","_a","setFilter","setPagination","setSort","rest","useStyles","theme","root","label","transform","transformOrigin","direction","name","CheckboxGroupInput","_b","choices","format","helperText","_c","margin","onBlur","onChange","onFocus","optionText","optionValue","options","parse","resource","row","source","translate","translateChoice","validate","classes","_d","id","_e","input","finalFormOnChange","finalFormOnBlur","value","isRequired","_f","meta","error","touched","handleCheck","event","isChecked","newValue","JSON","target","concat","filter","v","createElement","component","className","map","choice","key","propTypes","arrayOf","object","string","oneOfType","func","element","bool","defaultProps","fullWidth"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FieldTitle, useInput } from 'ra-core';\nimport defaultSanitizeRestProps from './sanitizeRestProps';\nimport CheckboxGroupInputItem from './CheckboxGroupInputItem';\nimport InputHelperText from './InputHelperText';\nvar sanitizeRestProps = function (_a) {\n    var setFilter = _a.setFilter, setPagination = _a.setPagination, setSort = _a.setSort, rest = __rest(_a, [\"setFilter\", \"setPagination\", \"setSort\"]);\n    return defaultSanitizeRestProps(rest);\n};\nvar useStyles = makeStyles(function (theme) { return ({\n    root: {},\n    label: {\n        transform: 'translate(0, 8px) scale(0.75)',\n        transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right'),\n    },\n}); }, { name: 'RaCheckboxGroupInput' });\n/**\n * An Input component for a checkbox group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\n * the 'optionValue' of 'choices' attribute objects.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *     { id: 12, name: 'Ray Hakt' },\n *     { id: 31, name: 'Ann Gullar' },\n *     { id: 42, name: 'Sean Phonee' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi' },\n *    { _id: 456, full_name: 'Jane Austen' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.category.programming' },\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\n *    { id: 'photography', name: 'myroot.category.photography' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <CheckboxGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Checkbox> components\n */\nvar CheckboxGroupInput = function (_a) {\n    var _b = _a.choices, choices = _b === void 0 ? [] : _b, format = _a.format, helperText = _a.helperText, label = _a.label, _c = _a.margin, margin = _c === void 0 ? 'dense' : _c, onBlur = _a.onBlur, onChange = _a.onChange, onFocus = _a.onFocus, optionText = _a.optionText, optionValue = _a.optionValue, options = _a.options, parse = _a.parse, resource = _a.resource, row = _a.row, source = _a.source, translate = _a.translate, translateChoice = _a.translateChoice, validate = _a.validate, rest = __rest(_a, [\"choices\", \"format\", \"helperText\", \"label\", \"margin\", \"onBlur\", \"onChange\", \"onFocus\", \"optionText\", \"optionValue\", \"options\", \"parse\", \"resource\", \"row\", \"source\", \"translate\", \"translateChoice\", \"validate\"]);\n    var classes = useStyles({});\n    var _d = useInput(__assign({ format: format,\n        onBlur: onBlur,\n        onChange: onChange,\n        onFocus: onFocus,\n        parse: parse,\n        resource: resource,\n        source: source,\n        validate: validate }, rest)), id = _d.id, _e = _d.input, finalFormOnChange = _e.onChange, finalFormOnBlur = _e.onBlur, value = _e.value, isRequired = _d.isRequired, _f = _d.meta, error = _f.error, touched = _f.touched;\n    var handleCheck = useCallback(function (event, isChecked) {\n        var newValue;\n        try {\n            // try to convert string value to number, e.g. '123'\n            newValue = JSON.parse(event.target.value);\n        }\n        catch (e) {\n            // impossible to convert value, e.g. 'abc'\n            newValue = event.target.value;\n        }\n        if (isChecked) {\n            finalFormOnChange((value || []).concat([newValue]));\n        }\n        else {\n            finalFormOnChange(value.filter(function (v) { return v != newValue; })); // eslint-disable-line eqeqeq\n        }\n        finalFormOnBlur(); // HACK: See https://github.com/final-form/react-final-form/issues/365#issuecomment-515045503\n    }, [finalFormOnChange, finalFormOnBlur, value]);\n    return (React.createElement(FormControl, __assign({ component: \"fieldset\", margin: margin, error: touched && !!error }, sanitizeRestProps(rest)),\n        React.createElement(FormLabel, { component: \"legend\", className: classes.label },\n            React.createElement(FieldTitle, { label: label, source: source, resource: resource, isRequired: isRequired })),\n        React.createElement(FormGroup, { row: row }, choices.map(function (choice) { return (React.createElement(CheckboxGroupInputItem, { key: get(choice, optionValue), choice: choice, id: id, onChange: handleCheck, options: options, optionText: optionText, optionValue: optionValue, translateChoice: translateChoice, value: value })); })),\n        (touched && error) || helperText ? (React.createElement(FormHelperText, null,\n            React.createElement(InputHelperText, { touched: touched, error: error, helperText: helperText }))) : null));\n};\nCheckboxGroupInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n    className: PropTypes.string,\n    label: PropTypes.string,\n    source: PropTypes.string,\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    row: PropTypes.bool,\n    resource: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\nCheckboxGroupInput.defaultProps = {\n    options: {},\n    optionText: 'name',\n    optionValue: 'id',\n    translateChoice: true,\n    fullWidth: true,\n    row: true,\n};\nexport default CheckboxGroupInput;\n"]},"metadata":{},"sourceType":"module"}